if not platform: platform = '1'
hutch, user, password = ('tst', 'tstopr', 'pcds')

ld_lib_path = f'LD_LIBRARY_PATH={CONDA_PREFIX}/epics/lib/linux-x86_64:{CONDA_PREFIX}/pcas/lib/linux-x86_64'
epics_env = 'EPICS_PVA_ADDR_LIST=172.21.151.255'+' '+ld_lib_path

collect_host = 'drp-tst-acc01'

# procmgr FLAGS: <port number> static port number to keep executable
#                              running across multiple start/stop commands.
#
# HOST       UNIQUEID      FLAGS  COMMAND+ARGS
# list of processes to run
#   required fields: id, cmd
#   optional fields: host, port, flags, conda, env, rtprio
#     flags:
#        'x' or 'X'  -> xterm: open small or large xterm for process console
#        's'         -> stop: sends ctrl-c to process
#        'u'         -> uniqueid: use 'id' as detector alias (supported by acq, cam, camedt, evr, and simcam)

procmgr_config = [
 {                        id:'groupca',flags:'s', env:epics_env, cmd:'groupca DAQ:LAB2 2 1 5'},
 {                        id:'procstat', flags:'p', cmd:'procstat p'+platform+'.cnf.last'},
 { host: collect_host,    id:'control', flags:'spu', env:epics_env, cmd:'control    -C BEAM -P '+hutch+' -B DAQ:LAB2 -x 2 --user '+user+' --password '+password},
 {                        flags:'p', id:'control_gui', cmd:'control_gui -E -t 30000 -l WARNING --user=tstopr --password=pcds -H '+collect_host},
 # trigger event builder
 { host: 'drp-tst-acc01', id:'teb1', flags:'pu', cmd:f'teb -P {hutch} -C {collect_host}'},
 # meb
 { host: 'drp-tst-acc01', id:'meb1', flags:'spu', cmd:f'monReqServer -P {hutch} -d -q 4 -C {collect_host}'},
 # drp
 { host: 'drp-tst-acc01', id:'cam_0', flags:'spu', cmd:f'drp -o ~caf/data -l 0x2 -D fakecam -d /dev/datadev_1 -P {hutch} -C {collect_host}'},
 { host: 'drp-tst-acc01', id:'cam_1', flags:'spu', cmd:f'drp -o ~caf/data -l 0x1 -D fakecam -d /dev/datadev_0 -P {hutch} -C {collect_host}'}
]
